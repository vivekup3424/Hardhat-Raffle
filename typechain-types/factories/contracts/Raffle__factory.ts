/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Raffle, RaffleInterface } from "../../contracts/Raffle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "vrfCoordinatorV2",
        type: "address",
      },
      {
        internalType: "uint64",
        name: "subscriptionId",
        type: "uint64",
      },
      {
        internalType: "bytes32",
        name: "gasLane",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "interval",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "entranceFee",
        type: "uint256",
      },
      {
        internalType: "uint32",
        name: "callbackGasLimit",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "have",
        type: "address",
      },
      {
        internalType: "address",
        name: "want",
        type: "address",
      },
    ],
    name: "OnlyCoordinatorCanFulfill",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__RaffleNotOpen",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__SendMoreToEnterRaffle",
    type: "error",
  },
  {
    inputs: [],
    name: "Raffle__TransferFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "numPlayers",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "raffleState",
        type: "uint256",
      },
    ],
    name: "Raffle__UpkeepNotNeeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "RaffleEnter",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
    ],
    name: "RequestedRaffleWinner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "player",
        type: "address",
      },
    ],
    name: "WinnerPicked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "checkUpkeep",
    outputs: [
      {
        internalType: "bool",
        name: "upkeepNeeded",
        type: "bool",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "enterRaffle",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getEntranceFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getInterval",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastTimeStamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getNumberOfPlayers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPlayer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRaffleState",
    outputs: [
      {
        internalType: "enum Raffle.RaffleState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecentWinner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRequestConfirmations",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getSubscriptionId",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "performUpkeep",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "randomWords",
        type: "uint256[]",
      },
    ],
    name: "rawFulfillRandomWords",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101606040523480156200001257600080fd5b5060405162001908380380620019088339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508261012081815250508467ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250508161014081815250506000600360006101000a81548160ff021916908360018111156200010a5762000109620002b5565b5b0217905550426000819055508063ffffffff166101008163ffffffff1660e01b815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000196565b95505060406200020389828a0162000151565b94505060606200021689828a0162000168565b93505060806200022989828a0162000168565b92505060a06200023c89828a016200017f565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516101005160e01c610120516101405161151a620003ee60003960008181610340015261043d01526000818161083301526108dc015260006106e20152600061069e0152600081816106bf015261090d0152600061066201526000818161037d01526103d1015261151a6000f3fe6080604052600436106100dd5760003560e01c80635f1b0fd81161007f578063c1c244e811610059578063c1c244e81461027e578063de3d9fb7146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b80635f1b0fd8146101ea5780636e04ff0d1461021557806391ad27b414610253576100dd565b80632cfcc539116100bb5780632cfcc539146101615780634585e33b1461016b578063473f1ddc1461019457806353a2c19a146101bf576100dd565b806309bc33a7146100e2578063115cbaf51461010d5780631fe543e314610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190611105565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f91906110ea565b60405180910390f35b34801561014457600080fd5b5061015f600480360381019061015a9190610ede565b61037b565b005b61016961043b565b005b34801561017757600080fd5b50610192600480360381019061018d9190610dee565b6105aa565b005b3480156101a057600080fd5b506101a96107aa565b6040516101b69190611023565b60405180910390f35b3480156101cb57600080fd5b506101d46107d4565b6040516101e19190611105565b60405180910390f35b3480156101f657600080fd5b506101ff6107e3565b60405161020c9190611105565b60405180910390f35b34801561022157600080fd5b5061023c60048036038101906102379190610e3b565b6107f0565b60405161024a929190611067565b60405180910390f35b34801561025f57600080fd5b506102686108d8565b6040516102759190611105565b60405180910390f35b34801561028a57600080fd5b50610293610900565b6040516102a09190611105565b60405180910390f35b3480156102b557600080fd5b506102be610909565b6040516102cb9190611157565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190610e84565b610931565b6040516103089190611023565b60405180910390f35b34801561031d57600080fd5b50610326610979565b6040516103339190611105565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600360009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042492919061103e565b60405180910390fd5b6104378282610986565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610495576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a9576104a86113fa565b5b600360009054906101000a900460ff1660018111156104cb576104ca6113fa565b5b14610502576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105c4604051806020016040528060008152506107f0565b509050806106335747600280549050600360009054906101000a900460ff1660018111156105f5576105f46113fa565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161062a93929190611120565b60405180910390fd5b6001600360006101000a81548160ff02191690836001811115610659576106586113fa565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610723959493929190611097565b602060405180830381600087803b15801561073d57600080fd5b505af1158015610751573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107759190610eb1565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600360009054906101000a900460ff166001811115610818576108176113fa565b5b6000600181111561082c5761082b6113fa565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060005442610860919061121b565b119050600080600280549050119050600080471190508280156108805750835b80156108895750805b80156108925750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002828154811061094757610946611429565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600280549050905090565b6000600280549050826000815181106109a2576109a1611429565b5b60200260200101516109b4919061136b565b90506000600282815481106109cc576109cb611429565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a5557610a54611458565b5b604051908082528060200260200182016040528015610a835781602001602082028036833780820191505090505b5060029080519060200190610a99929190610bb9565b506000600360006101000a81548160ff02191690836001811115610ac057610abf6113fa565b5b02179055504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610af29061100e565b60006040518083038185875af1925050503d8060008114610b2f576040519150601f19603f3d011682016040523d82523d6000602084013e610b34565b606091505b5050905080610b6f576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c32579160200282015b82811115610c315782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bd9565b5b509050610c3f9190610c43565b5090565b5b80821115610c5c576000816000905550600101610c44565b5090565b6000610c73610c6e84611197565b611172565b90508083825260208201905082856020860282011115610c9657610c95611491565b5b60005b85811015610cc65781610cac8882610dc4565b845260208401935060208301925050600181019050610c99565b5050509392505050565b6000610ce3610cde846111c3565b611172565b905082815260208101848484011115610cff57610cfe611496565b5b610d0a8482856112f8565b509392505050565b600082601f830112610d2757610d2661148c565b5b8135610d37848260208601610c60565b91505092915050565b60008083601f840112610d5657610d5561148c565b5b8235905067ffffffffffffffff811115610d7357610d72611487565b5b602083019150836001820283011115610d8f57610d8e611491565b5b9250929050565b600082601f830112610dab57610daa61148c565b5b8135610dbb848260208601610cd0565b91505092915050565b600081359050610dd3816114cd565b92915050565b600081519050610de8816114cd565b92915050565b60008060208385031215610e0557610e046114a0565b5b600083013567ffffffffffffffff811115610e2357610e2261149b565b5b610e2f85828601610d40565b92509250509250929050565b600060208284031215610e5157610e506114a0565b5b600082013567ffffffffffffffff811115610e6f57610e6e61149b565b5b610e7b84828501610d96565b91505092915050565b600060208284031215610e9a57610e996114a0565b5b6000610ea884828501610dc4565b91505092915050565b600060208284031215610ec757610ec66114a0565b5b6000610ed584828501610dd9565b91505092915050565b60008060408385031215610ef557610ef46114a0565b5b6000610f0385828601610dc4565b925050602083013567ffffffffffffffff811115610f2457610f2361149b565b5b610f3085828601610d12565b9150509250929050565b610f438161124f565b82525050565b610f5281611261565b82525050565b610f618161126d565b82525050565b6000610f72826111f4565b610f7c81856111ff565b9350610f8c818560208601611307565b610f95816114a5565b840191505092915050565b610fa9816112e6565b82525050565b6000610fbc600083611210565b9150610fc7826114b6565b600082019050919050565b610fdb8161128a565b82525050565b610fea816112b8565b82525050565b610ff9816112c2565b82525050565b611008816112d2565b82525050565b600061101982610faf565b9150819050919050565b60006020820190506110386000830184610f3a565b92915050565b60006040820190506110536000830185610f3a565b6110606020830184610f3a565b9392505050565b600060408201905061107c6000830185610f49565b818103602083015261108e8184610f67565b90509392505050565b600060a0820190506110ac6000830188610f58565b6110b96020830187610fff565b6110c66040830186610fd2565b6110d36060830185610ff0565b6110e06080830184610ff0565b9695505050505050565b60006020820190506110ff6000830184610fa0565b92915050565b600060208201905061111a6000830184610fe1565b92915050565b60006060820190506111356000830186610fe1565b6111426020830185610fe1565b61114f6040830184610fe1565b949350505050565b600060208201905061116c6000830184610fff565b92915050565b600061117c61118d565b9050611188828261133a565b919050565b6000604051905090565b600067ffffffffffffffff8211156111b2576111b1611458565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111de576111dd611458565b5b6111e7826114a5565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611226826112b8565b9150611231836112b8565b9250828210156112445761124361139c565b5b828203905092915050565b600061125a82611298565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611285826114b9565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112f182611277565b9050919050565b82818337600083830152505050565b60005b8381101561132557808201518184015260208101905061130a565b83811115611334576000848401525b50505050565b611343826114a5565b810181811067ffffffffffffffff8211171561136257611361611458565b5b80604052505050565b6000611376826112b8565b9150611381836112b8565b925082611391576113906113cb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114ca576114c96113fa565b5b50565b6114d6816112b8565b81146114e157600080fd5b5056fea2646970667358221220cb313e5b55507d4a3f1df62e05101cfa3fcc245e0d6418a73ecfd84a5731530864736f6c63430008070033";

type RaffleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RaffleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Raffle__factory extends ContractFactory {
  constructor(...args: RaffleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    vrfCoordinatorV2: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Raffle> {
    return super.deploy(
      vrfCoordinatorV2,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    ) as Promise<Raffle>;
  }
  override getDeployTransaction(
    vrfCoordinatorV2: PromiseOrValue<string>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    gasLane: PromiseOrValue<BytesLike>,
    interval: PromiseOrValue<BigNumberish>,
    entranceFee: PromiseOrValue<BigNumberish>,
    callbackGasLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      vrfCoordinatorV2,
      subscriptionId,
      gasLane,
      interval,
      entranceFee,
      callbackGasLimit,
      overrides || {}
    );
  }
  override attach(address: string): Raffle {
    return super.attach(address) as Raffle;
  }
  override connect(signer: Signer): Raffle__factory {
    return super.connect(signer) as Raffle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RaffleInterface {
    return new utils.Interface(_abi) as RaffleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Raffle {
    return new Contract(address, _abi, signerOrProvider) as Raffle;
  }
}
